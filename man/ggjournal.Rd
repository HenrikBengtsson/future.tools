% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggjournal.R
\name{ggjournal}
\alias{ggjournal}
\title{Create a Future Journal Plot}
\usage{
ggjournal(
  x,
  baseline = TRUE,
  by = c("future", "worker"),
  time_range = getOption("future.tools.ggjournal.time_range", NULL),
  item_range = getOption("future.tools.ggjournal.item_range", NULL),
  ...
)
}
\arguments{
\item{x}{A list of \link[future:Future-class]{future::Future} or FutureJournal objects.}

\item{baseline}{(POSIXct; optional) A timestamp to server as time zero
for the relative timestamps. If \code{TRUE} (default), then the earliest
timepoint observed is used as the baseline.}

\item{by}{(character string) Vertically separate by future or worker?}

\item{time_range}{(optional vector of length two) The range of time
to displayed.}

\item{item_range}{(optional vector of length two) The range of future
or worker indices to displayed.}

\item{\ldots}{Currently not used.}
}
\value{
A \link[ggplot2:ggplot]{ggplot2::ggplot} object.
}
\description{
Create a Future Journal Plot
}
\examples{
library(future.apply)
library(future)

slow_fcn <- function(x) {
  Sys.sleep(x / 10)
  sqrt(x)
}

## Plot with fixed x and y limits
ggjournal_x <- function(js) {
  for (by in c("future", "worker")) {
    item_range <- if (by == "future") c(1, 5) else c(0, 1.8)
    print(ggjournal(js, by = by,
                    time_range = c(0, 2.0), item_range = item_range))
  }
}


plan(sequential)

js <- capture_journals({
  fs <- lapply(5:1, FUN = function(x) future(slow_fcn(x)))
  vs <- value(fs)
})
ggjournal_x(js)

js <- capture_journals({
  vs <- future_lapply(5:1, FUN = slow_fcn)
})
ggjournal_x(js)


plan(multisession, workers = 2)

js <- capture_journals({
  fs <- lapply(5:1, FUN = function(x) future(slow_fcn(x)))
  vs <- value(fs)
})
ggjournal_x(js)

js <- capture_journals({
  vs <- future_lapply(5:1, FUN = slow_fcn)
})
ggjournal_x(js)


## Shut down parallel workers
plan(sequential)
}
