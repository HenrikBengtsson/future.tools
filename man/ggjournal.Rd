% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggjournal.R
\name{ggjournal}
\alias{ggjournal}
\title{Create a Future Journal Plot}
\usage{
ggjournal(x, baseline = TRUE, ...)
}
\arguments{
\item{x}{A list of \link[future:Future-class]{future::Future} or FutureJournal objects.}

\item{baseline}{(POSIXct; optional) A timestamp to server as time zero
for the relative timestamps. If \code{TRUE} (default), then the earliest
timepoint observed is used as the baseline.}

\item{\ldots}{Currently not used.}
}
\value{
A \link[ggplot2:ggplot]{ggplot2::ggplot} object.
}
\description{
Create a Future Journal Plot
}
\examples{
library(future)
library(ggplot2)

slow_fcn <- function(x) {
  Sys.sleep(x / 10)
  sqrt(x)
}

plan(sequential)
js <- capture_journals({
  fs <- lapply(5:1, FUN = function(x) future(slow_fcn(x)))
  vs <- value(fs)
})
print(ggjournal(js) + coord_cartesian(xlim = c(0.0, 2.0), ylim = c(1, 6)))

plan(multisession, workers = 2)
js <- capture_journals({
  fs <- lapply(5:1, FUN = function(x) future(slow_fcn(x)))
  vs <- value(fs)
})
print(ggjournal(js) + coord_cartesian(xlim = c(0.0, 2.0), ylim = c(1, 6)))

## Increase polling time to 0.1 seconds (default is 0.01 seconds)
options(future.wait.interval = 0.1)
js <- capture_journals({
  fs <- lapply(5:1, FUN = function(x) future(slow_fcn(x)))
  vs <- value(fs)
})
print(ggjournal(js) + coord_cartesian(xlim = c(0.0, 2.0), ylim = c(1, 6)))

## Shut down parallel workers
plan(sequential)
library(future.apply)
library(ggplot2)

slow_fcn <- function(x) {
  Sys.sleep(x / 10)
  sqrt(x)
}

plan(sequential)
js <- capture_journals({
  vs <- future_lapply(5:1, FUN = slow_fcn)
})
print(ggjournal(js) + coord_cartesian(xlim = c(0.0, 2.0), ylim = c(1, 6)))

plan(multisession, workers = 2)
js <- capture_journals({
  vs <- future_lapply(5:1, FUN = slow_fcn)
})
print(ggjournal(js) + coord_cartesian(xlim = c(0.0, 2.0), ylim = c(1, 6)))

## Shut down parallel workers
plan(sequential)
}
